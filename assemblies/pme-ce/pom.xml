<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>pentaho</groupId>
    <artifactId>pentaho-metadata-editor-assemblies</artifactId>
    <version>10.3.0.0-SNAPSHOT</version>
  </parent>
  <groupId>pentaho</groupId>
  <artifactId>pme-ce</artifactId>
  <version>10.3.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <properties>
    <hsqldb.version>2.3.2</hsqldb.version>

    <pdi-dataservice-client-plugin.version>10.3.0.0-SNAPSHOT</pdi-dataservice-client-plugin.version>
    <pentaho-metadata.version>10.3.0.0-SNAPSHOT</pentaho-metadata.version>
    <pentaho-launcher.version>10.3.0.0-SNAPSHOT</pentaho-launcher.version>
    <commons-database.version>10.3.0.0-SNAPSHOT</commons-database.version>

    <pentaho-hadoop-shims.version>10.3.0.0-SNAPSHOT</pentaho-hadoop-shims.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>${hsqldb.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.pentaho.di.plugins</groupId>
      <artifactId>pentaho-metastore-locator-plugin</artifactId>
      <version>${pdi.version}</version>
      <type>zip</type>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.pentaho.di.plugins</groupId>
      <artifactId>pentaho-metastore-locator-api</artifactId>
      <version>${pdi.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.pentaho.di.plugins</groupId>
      <artifactId>pentaho-kettle-repository-locator-api</artifactId>
      <version>${pdi.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pdi-dataservice-client-plugin</artifactId>
      <version>${pdi-dataservice-client-plugin.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-metadata-editor</artifactId>
      <version>${pentaho-metadata.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-application-launcher</artifactId>
      <version>${pentaho-launcher.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.annotation</groupId>
      <artifactId>jakarta.annotation-api</artifactId>
      <version>${jakarta-annotaion-api.version}</version>
      <scope>runtime</scope>
    </dependency>
    <!-- Use log4j implementation with SLF4J -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-jcl</artifactId>
      <version>${log4j.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>xmlgraphics-commons</artifactId>
      <version>${xml-graphics-common.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.pentaho</groupId>
      <artifactId>commons-database-model</artifactId>
      <version>${commons-database.version}</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-launcher</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-application-launcher</artifactId>
                  <version>${pentaho-launcher.version}</version>
                  <outputDirectory>${project.build.directory}/launcher</outputDirectory>
                  <destFileName>pentaho-application-launcher.jar</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy-lib</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/lib</outputDirectory>
              <includeArtifactIds>pentaho-metadata-editor,jakarta.annotation-api,pentaho-metastore-locator-api,pentaho-kettle-repository-locator-api</includeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-libext-jdbc</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/libext/JDBC</outputDirectory>
              <includeArtifactIds>h2,hsqldb</includeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-libext-pentaho</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/libext/pentaho</outputDirectory>
              <includeScope>runtime</includeScope>
              <includeTypes>jar</includeTypes>
              <excludeArtifactIds>h2,hsqldb,org.eclipse.swt.cocoa.macosx.x86_64,org.eclipse.swt.gtk.linux.x86,org.eclipse.swt.gtk.linux.x86_64,org.eclipse.swt.win32.win32.x86_64,pdi-dataservice-client-plugin,pentaho-application-launcher,pentaho-metadata-editor</excludeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-swt-libs</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.gtk.linux.x86</artifactId>
                  <version>${org.eclipse.swt.gtk.linux.x86.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/linux/x86</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.gtk.linux.x86_64</artifactId>
                  <version>${org.eclipse.swt.gtk.linux.x86_64.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/linux/x86_64</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.win32.win32.x86_64</artifactId>
                  <version>${org.eclipse.swt.win32.win32.x86_64.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/win64</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                   <artifactId>org.eclipse.swt.cocoa.macosx.x86_64</artifactId>
                   <version>${org.eclipse.swt.cocoa.macosx.x86_64.version}</version>
                   <outputDirectory>${project.build.directory}/libs/libswt/osx64</outputDirectory>
                   <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.cocoa.macosx.aarch64</artifactId>
                  <version>${org.eclipse.swt.cocoa.macosx.aarch64.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/osx64_aarch</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy-pdi-dataservice-plugin</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pdi-dataservice-client-plugin</artifactId>
                  <version>${pdi-dataservice-client-plugin.version}</version>
                  <outputDirectory>${project.build.directory}/plugins</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy-plugins</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.pentaho.di.plugins</groupId>
                  <artifactId>pentaho-metastore-locator-plugin</artifactId>
                  <version>${pdi.version}</version>
                  <outputDirectory>${project.build.directory}/plugins</outputDirectory>
                  <type>zip</type>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>assembly_package</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <desciptor>${basedir}/src/assemblies/${assemblyFile}</desciptor>
              </descriptors>
              <appendAssemblyId>${assembly_appendId}</appendAssemblyId>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>

    <profile>
      <id>default-no-osgi</id>
      <activation>
        <property>
          <name>!osgi</name>
        </property>
      </activation>
      <properties>
        <assemblyFile>assembly.xml</assemblyFile>
        <assembly_appendId>false</assembly_appendId>
      </properties>
    </profile>

    <profile>
      <id>osgi</id>
      <activation>
        <property>
          <name>osgi</name>
        </property>
      </activation>
      <properties>
        <assemblyFile>assembly-osgi.xml</assemblyFile>
        <assembly_appendId>true</assembly_appendId>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.pentaho</groupId>
          <artifactId>shim-api-core</artifactId>
          <version>${pentaho-hadoop-shims.version}</version>
          <type>jar</type>
          <scope>runtime</scope>
          <exclusions>
            <exclusion>
              <artifactId>*</artifactId>
              <groupId>*</groupId>
            </exclusion>
          </exclusions>
        </dependency>

        <!-- OSGi Dependencies -->
        <!-- Because of: -->
        <!-- pdi-osgi-bridge-core (KarafLifecycleListener and OSGIPluginRegistryExtension) -->
        <dependency>
          <groupId>org.osgi</groupId>
          <artifactId>org.osgi.core</artifactId>
          <scope>runtime</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>

          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-karaf-assembly</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>org.hitachivantara.karaf.assemblies</groupId>
                      <artifactId>pme</artifactId>
                      <version>${pentaho-karaf.version}</version>
                      <type>zip</type>
                      <outputDirectory>${project.build.directory}/karaf</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>groovy-maven-plugin</artifactId>
            <version>2.1.1</version>
            <executions>
              <execution>
                <id>generate-hadoop-addon</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>
                    println( "INFO: generating ${project.artifactId}-${project.version}-hadoop-addon.zip ..." );
                    //<![CDATA[

                    import java.util.HashMap;
                    import java.util.Map;
                    import java.util.Enumeration;
                    import java.io.File;
                    import java.io.IOException;
                    import java.io.FileInputStream;
                    import java.io.FileOutputStream;
                    import java.net.URI;
                    import java.util.zip.ZipEntry;
                    import java.util.zip.ZipFile;
                    import java.util.zip.ZipInputStream;
                    import java.util.zip.ZipOutputStream;

                    import org.apache.commons.io.IOUtils;

                    try {

                      File noOsgiZip = new File( project.build.directory.toString() + "/${project.artifactId}-${project.version}.zip" );
                      if ( !noOsgiZip.exists() ) {
                        println("ERROR: " + project.build.directory.toString() + "/${project.artifactId}-${project.version}.zip not found");
                        throw new RuntimeException( 
                          "ensure you have not run 'clean' prior to executing this profile and that you've executed the 'default' profile");
                      }
                    
                      File osgiZip = new File( project.build.directory.toString() + "/${project.artifactId}-${project.version}-osgi.zip" );
                    
                      int i = 0;
                      Map<String,Long> noOsgiZipFileChecksumMap = new HashMap<String,Long>();
                      ZipFile noOsgiZipFile = new ZipFile( noOsgiZip );
                      Enumeration noOsgiEnum = noOsgiZipFile.entries();
                      while ( noOsgiEnum.hasMoreElements() ) {
                        ZipEntry entry = (ZipEntry) noOsgiEnum.nextElement();
                        noOsgiZipFileChecksumMap.put( entry.getName(), (Long) entry.getCrc() );
                        i++;
                      }

                      ZipOutputStream zipOutputStream = 
                        new ZipOutputStream( 
                          new FileOutputStream( 
                            new File( project.build.directory.toString() + "/${project.artifactId}-${project.version}-hadoop-addon.zip" )
                          )
                        );

                      int j = 0;
                      int k = 0;
                      int l = 0;
                      boolean copyFile = false;
                      ZipFile osgiZipFile = new ZipFile( osgiZip );
                      Enumeration osgiEnum = osgiZipFile.entries();
                      while ( osgiEnum.hasMoreElements() ) {
                        ZipEntry entry = (ZipEntry) osgiEnum.nextElement();
                        String name = entry.getName();
                        Long crc = entry.getCrc();
                        if ( !noOsgiZipFileChecksumMap.containsKey(name) ) {
                          copyFile = true;
                          k++;
                        } else if ( !crc.equals( noOsgiZipFileChecksumMap.get(name) ) ) {
                          println( name + " has different crc" );
                          copyFile = true;
                          l++;
                        }
                        if ( copyFile ) {
                          ZipEntry newEntry = new ZipEntry( entry.getName() );
                          zipOutputStream.putNextEntry( newEntry );
                          IOUtils.copy( osgiZipFile.getInputStream( entry ), zipOutputStream );
                          zipOutputStream.closeEntry();
                        }
                        copyFile = false;
                        j++;
                      }
                      ZipEntry readmeEntry = new ZipEntry( "metadata-editor/HADOOP_ADDON_README" );
                      zipOutputStream.putNextEntry( readmeEntry );
                      IOUtils.copy( new FileInputStream( new File ( project.basedir.toString() + "/src/main/docs/addon.README" ) ), zipOutputStream );
                      ZipEntry batchFileEntry = new ZipEntry( "metadata-editor/uninstall-hadoop-addon.bat" );
                      zipOutputStream.putNextEntry( batchFileEntry );
                      IOUtils.copy( new FileInputStream( new File ( project.basedir.toString() + "/src/main/resources-addon/uninstall-hadoop-addon.bat" ) ), zipOutputStream );
                      ZipEntry shellFileEntry = new ZipEntry( "metadata-editor/uninstall-hadoop-addon.sh" );
                      zipOutputStream.putNextEntry( shellFileEntry );
                      IOUtils.copy( new FileInputStream( new File ( project.basedir.toString() + "/src/main/resources-addon/uninstall-hadoop-addon.sh" ) ), zipOutputStream );

                      zipOutputStream.closeEntry();

                      println( "osgi: " + j + " files");
                      println( "noOsgi: " + i + " files" );
                      println( "missing files: " + k );
                      println( "changed files: " + l );

                      zipOutputStream.finish();
                      zipOutputStream.close();
                      noOsgiZipFile.close();
                      osgiZipFile.close();

                    } catch( IOException ioe) {
                      throw new RuntimeException( ioe );
                    }

                    //]]>
                  </source>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.11.0</version>
              </dependency>
            </dependencies>
          </plugin>

          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>3.3.0</version>
            <executions>
              <execution>
                <id>attach-hadoop-addon-artifact</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>attach-artifact</goal>
                </goals>
                <configuration>
                  <artifacts>
                    <artifact>
                      <file>${project.build.directory}/${project.artifactId}-${project.version}-hadoop-addon.zip</file>
                      <type>zip</type>
                      <classifier>hadoop-addon</classifier>
                    </artifact>
                  </artifacts>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>

  </profiles>
</project>
