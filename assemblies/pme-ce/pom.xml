<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>pentaho</groupId>
    <artifactId>pentaho-metadata-editor-assemblies</artifactId>
    <version>11.0.0.0-SNAPSHOT</version>
  </parent>
  <groupId>pentaho</groupId>
  <artifactId>pme-ce</artifactId>
  <version>11.0.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <properties>
    <hsqldb.version>2.3.2</hsqldb.version>

    <pdi-dataservice-client-plugin.version>11.0.0.0-SNAPSHOT</pdi-dataservice-client-plugin.version>
    <pentaho-metadata.version>11.0.0.0-SNAPSHOT</pentaho-metadata.version>
    <pentaho-launcher.version>11.0.0.0-SNAPSHOT</pentaho-launcher.version>
    <commons-database.version>11.0.0.0-SNAPSHOT</commons-database.version>

    <pentaho-hadoop-shims.version>11.0.0.0-SNAPSHOT</pentaho-hadoop-shims.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>${h2.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>${hsqldb.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.pentaho.di.plugins</groupId>
      <artifactId>pentaho-metastore-locator-plugin</artifactId>
      <version>${pdi.version}</version>
      <type>zip</type>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.pentaho.di.plugins</groupId>
      <artifactId>pentaho-metastore-locator-api</artifactId>
      <version>${pdi.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.pentaho.di.plugins</groupId>
      <artifactId>pentaho-kettle-repository-locator-api</artifactId>
      <version>${pdi.version}</version>
      <scope>runtime</scope>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-metadata-editor</artifactId>
      <version>${pentaho-metadata.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>pentaho</groupId>
      <artifactId>pentaho-application-launcher</artifactId>
      <version>${pentaho-launcher.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.annotation</groupId>
      <artifactId>jakarta.annotation-api</artifactId>
      <version>${jakarta.annotation-api.version}</version>
      <scope>runtime</scope>
    </dependency>
    <!-- Use log4j implementation with SLF4J -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j2-impl</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-jcl</artifactId>
      <version>${log4j.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.xmlgraphics</groupId>
      <artifactId>xmlgraphics-commons</artifactId>
      <version>${xml-graphics-common.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.pentaho</groupId>
      <artifactId>commons-database-model</artifactId>
      <version>${commons-database.version}</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-launcher</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pentaho-application-launcher</artifactId>
                  <version>${pentaho-launcher.version}</version>
                  <outputDirectory>${project.build.directory}/launcher</outputDirectory>
                  <destFileName>pentaho-application-launcher.jar</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy-lib</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/lib</outputDirectory>
              <includeArtifactIds>pentaho-metadata-editor,jakarta.annotation-api,pentaho-metastore-locator-api,pentaho-kettle-repository-locator-api</includeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-libext-jdbc</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/libext/JDBC</outputDirectory>
              <includeArtifactIds>h2,hsqldb</includeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-libext-pentaho</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/libext/pentaho</outputDirectory>
              <includeScope>runtime</includeScope>
              <includeTypes>jar</includeTypes>
              <excludeArtifactIds>h2,hsqldb,org.eclipse.swt.cocoa.macosx.x86_64,org.eclipse.swt.gtk.linux.x86,org.eclipse.swt.gtk.linux.x86_64,org.eclipse.swt.win32.win32.x86_64,pdi-dataservice-client-plugin,pentaho-application-launcher,pentaho-metadata-editor</excludeArtifactIds>
            </configuration>
          </execution>
          <execution>
            <id>copy-swt-libs</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.gtk.linux.x86</artifactId>
                  <version>${org.eclipse.swt.gtk.linux.x86.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/linux/x86</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.gtk.linux.x86_64</artifactId>
                  <version>${org.eclipse.swt.gtk.linux.x86_64.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/linux/x86_64</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.win32.win32.x86_64</artifactId>
                  <version>${org.eclipse.swt.win32.win32.x86_64.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/win64</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                   <artifactId>org.eclipse.swt.cocoa.macosx.x86_64</artifactId>
                   <version>${org.eclipse.swt.cocoa.macosx.x86_64.version}</version>
                   <outputDirectory>${project.build.directory}/libs/libswt/osx64</outputDirectory>
                   <destFileName>swt.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <groupId>org.eclipse.platform</groupId>
                  <artifactId>org.eclipse.swt.cocoa.macosx.aarch64</artifactId>
                  <version>${org.eclipse.swt.cocoa.macosx.aarch64.version}</version>
                  <outputDirectory>${project.build.directory}/libs/libswt/osx64_aarch</outputDirectory>
                  <destFileName>swt.jar</destFileName>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy-pdi-dataservice-plugin</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>pentaho</groupId>
                  <artifactId>pdi-dataservice-client-plugin</artifactId>
                  <version>${pdi-dataservice-client-plugin.version}</version>
                  <outputDirectory>${project.build.directory}/plugins</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <id>copy-plugins</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>org.pentaho.di.plugins</groupId>
                  <artifactId>pentaho-metastore-locator-plugin</artifactId>
                  <version>${pdi.version}</version>
                  <outputDirectory>${project.build.directory}/plugins</outputDirectory>
                  <type>zip</type>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
          <execution>
            <!--
              Dependencies for Javax XML Binding API, JAXB Runtime, Javax Activation API, Javax Transaction API and IStack Commons Runtime
              These dependencies are required for OSGi environment and Felix directly depends on javax.xml.bind (Javax XML Bind API and Javax JAXB runtime) and we are making these available to OSGi through jre.properties.
              Even if these dependencies are added to pom.xml dependencies section, maven is trying to add the latest version of artifacts instead of adding jars with both versions.
              So, Following configuration helps to copy the both versions of jars to the lib.
             -->
            <id>copy-extra-dependencies</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/libs/libext/pentaho</outputDirectory>
              <artifactItems>
                <artifactItem>
                  <groupId>jakarta.xml.bind</groupId>
                  <artifactId>jakarta.xml.bind-api</artifactId>
                  <version>${jakarta.xml.bind-api.version}</version>
                  <type>jar</type>
                </artifactItem>
                <artifactItem>
                  <groupId>jakarta.xml.bind</groupId>
                  <artifactId>jakarta.xml.bind-api</artifactId>
                  <version>${jakarta.xml.bind-osgi.version}</version>
                  <type>jar</type>
                </artifactItem>

                <artifactItem>
                  <groupId>org.glassfish.jaxb</groupId>
                  <artifactId>jaxb-runtime</artifactId>
                  <version>${jaxb-api-osgi.version}</version>
                  <type>jar</type>
                </artifactItem>

                <artifactItem>
                  <groupId>jakarta.transaction</groupId>
                  <artifactId>jakarta.transaction-api</artifactId>
                  <version>${jakarta.transaction-api-osgi.version}</version>
                  <type>jar</type>
                </artifactItem>

                <artifactItem>
                  <groupId>jakarta.activation</groupId>
                  <artifactId>jakarta.activation-api</artifactId>
                  <version>${jakarta.activation-osgi.version}</version>
                </artifactItem>

                <artifactItem>
                  <groupId>com.sun.istack</groupId>
                  <artifactId>istack-commons-runtime</artifactId>
                  <version>${istack-osgi.version}</version>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>assembly_package</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <desciptor>${basedir}/src/assembly/assembly.xml</desciptor>
              </descriptors>
              <appendAssemblyId>false</appendAssemblyId>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
